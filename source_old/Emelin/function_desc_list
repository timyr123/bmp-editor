void fileWrite (int i, struct bmp, BYTE*** massivStruct)
{
	/*Берет название.bmp из конфига */
	/* Принимает номер бмп, структуру, и трёхмерный массив*/
	/* Запись "хедера" бмп */
}

void mallocRelease(struct bmp,BYTE*** massivStruct)
{
    /* Функция принимает строку, содержащую имя файла и строку наименования действия, производимого над файлом(чтение/запись);
    Создает указатель на файл;
    Открывает файл;
    Возвращает указатель на файл; */

    file *inputFile = fopen(fileName, openAction);

    return inputFile;
 }
 
void fileRead(int i, struct bmp)
{
	/* Принимает номер бмп и структуру */
	/* Чтение "хедера" бмп */
}

BYTE*** mallocImage (struct bmp)
{
	/*принимает высоту, ширину, размер из структуры*/
	/*выделяет память под динамический трёхмерный массив пикселей*/
	/*возвращает трёхмерный массив пикселей*/
}

BYTE*** bondingImage(struct bmp,BYTE*** massivStruct, int j)
{
	/*принимает высоту и ширину из структуры, трёхмерный массив, и способ склеивание в виде 1 или 2*/
	/*скелеивание картинок слева или справа*/
	/*возвращение трёхмерного массива пикселей с удвоением столбцов(то есть ширины картинки)*/
}

void fileWrite (int i, struct bmp, BYTE*** massivStruct)
{
	/* Принимает номер бмп, структуру, и трёхмерный массив*/
	/* Запись "хедера" бмп */
}

void mallocRelease(struct bmp,BYTE*** massivStruct)
{
	/*принимает структуру и трёхмерный массив*/
	/*освобождает память трёхмерного массива*/
}
	/*принимает структуру и трёхмерный массив*/
	/*освобождает память трёхмерного массива*/
}
